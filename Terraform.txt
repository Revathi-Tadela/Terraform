[ec2-user@ip-172-31-4-178 Terraform]$ pwd
/home/ec2-user/Terraform
[ec2-user@ip-172-31-4-178 Terraform]$ ls -lrt
total 20
-rw-r--r--. 1 ec2-user ec2-user  225 Sep 26 15:46 variables.tf
-rw-r--r--. 1 ec2-user ec2-user  322 Sep 26 15:56 output.tf
-rw-r--r--. 1 ec2-user ec2-user 4981 Sep 26 16:00 terraform.tfstate
-rw-r--r--. 1 ec2-user ec2-user  751 Sep 26 16:02 main.tf
[ec2-user@ip-172-31-4-178 Terraform]$ cat main.tf 
provider "aws" {
  region = "us-east-1"  # First region
  alias  = "us_east"
}

resource "aws_instance" "linux_instance_1" {
  provider      = aws.us_east
  ami           = "ami-0ebfd941bbafe70c6"  
  instance_type = "t2.micro"               
  count         = 1
  tags = {
    Name = "LinuxInstance1"
  }
}

provider "aws" {
  region = "us-west-2"  # Second region
  alias  = "us_west"
}

resource "aws_instance" "linux_instance_2" {
  provider      = aws.us_west
  ami           = "ami-08d8ac128e0a1b91c"  
  instance_type = "t2.micro"               
  count         = 1
  tags = {
    Name = "LinuxInstance2"
  }
}

[ec2-user@ip-172-31-4-178 Terraform]$ cat variables.tf 
# Define the instance types for the EC2 instances
variable "instance_types" {
  description = "Instance types for EC2 instances"
  type        = string
  default     = "t2.micro"  
}

[ec2-user@ip-172-31-4-178 Terraform]$ cat output.tf 
# Output the instance IDs for the US East region
output "us_east_instance_id" {
  value = aws_instance.linux_instance_1[0].id  
}

# Output the instance IDs for the US West region
output "us_west_instance_id" {
  value = aws_instance.linux_instance_2[0].id  
}

[ec2-user@ip-172-31-4-178 Terraform]$ terraform init
Initializing the backend...
Initializing provider plugins...
- Reusing previous version of hashicorp/aws from the dependency lock file
- Using previously-installed hashicorp/aws v5.68.0

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
[ec2-user@ip-172-31-4-178 Terraform]$ terraform plan
aws_instance.linux_instance_1[0]: Refreshing state... [id=i-0bd0007405a30c0e4]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.linux_instance_2[0] will be created
  + resource "aws_instance" "linux_instance_2" {
      + ami                                  = "ami-08d8ac128e0a1b91c"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = (known after apply)
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name" = "LinuxInstance2"
        }
      + tags_all                             = {
          + "Name" = "LinuxInstance2"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification (known after apply)

      + cpu_options (known after apply)

      + ebs_block_device (known after apply)

      + enclave_options (known after apply)

      + ephemeral_block_device (known after apply)

      + instance_market_options (known after apply)

      + maintenance_options (known after apply)

      + metadata_options (known after apply)

      + network_interface (known after apply)

      + private_dns_name_options (known after apply)

      + root_block_device (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + us_west_instance_id = (known after apply)

─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply" now.
[ec2-user@ip-172-31-4-178 Terraform]$ terraform install
Terraform has no command named "install".

To see all of Terraform's top-level commands, run:
  terraform -help

[ec2-user@ip-172-31-4-178 Terraform]$ terraform apply
aws_instance.linux_instance_1[0]: Refreshing state... [id=i-0bd0007405a30c0e4]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.linux_instance_2[0] will be created
  + resource "aws_instance" "linux_instance_2" {
      + ami                                  = "ami-08d8ac128e0a1b91c"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = (known after apply)
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name" = "LinuxInstance2"
        }
      + tags_all                             = {
          + "Name" = "LinuxInstance2"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification (known after apply)

      + cpu_options (known after apply)

      + ebs_block_device (known after apply)

      + enclave_options (known after apply)

      + ephemeral_block_device (known after apply)

      + instance_market_options (known after apply)

      + maintenance_options (known after apply)

      + metadata_options (known after apply)

      + network_interface (known after apply)

      + private_dns_name_options (known after apply)

      + root_block_device (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + us_west_instance_id = (known after apply)

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_instance.linux_instance_2[0]: Creating...
aws_instance.linux_instance_2[0]: Still creating... [10s elapsed]
aws_instance.linux_instance_2[0]: Still creating... [20s elapsed]
aws_instance.linux_instance_2[0]: Still creating... [30s elapsed]
aws_instance.linux_instance_2[0]: Creation complete after 32s [id=i-0a58bfb00556448aa]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.

Outputs:

us_east_instance_id = "i-0bd0007405a30c0e4"
us_west_instance_id = "i-0a58bfb00556448aa"
[ec2-user@ip-172-31-4-178 Terraform]$ 